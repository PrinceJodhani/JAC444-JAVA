package workshop2;

import java.util.*;
public class IncomeTax {

	 public static void main(String args[])
	    {
	        Scanner scnr = new Scanner (System.in);
	        System.out.println("0 - Compute personal Income Tax");
	        System.out.println("1 - Print the tax tables for taxable incomes (with range)");
	        System.out.println("2 - Exit");
	        int ch = scnr.nextInt();
	        if (ch == 0)
	        choice1();
	        else if (ch == 1)
	        choice2();
	    }

	    public static void choice1()
	    {
	        Scanner scnr = new Scanner (System.in);
	        double tax=0;
	        System.out.println("0 - single filer");
	        System.out.println("1 - married jointly or qualifying widow(er)");
	        System.out.println("2 - married seperately");
	        System.out.println("3 - head of household");
	        System.out.print("Enter the filing status: ");
	        int filingStatus = scnr.nextInt();
	        System.out.print("Enter the Taxable Income: $");
	        double taxableIncome = scnr.nextDouble();

	        if (filingStatus == 0)
	        tax = SINGLE_FILER(taxableIncome);

	        if (filingStatus == 1)
	        tax = MARRIED_JOINTLY_QUALIFIED_WIDOWER(taxableIncome);
	        if (filingStatus == 2)
	        tax = MARRIED_SEPERATELY(taxableIncome);

	        if (filingStatus == 3)
	        tax= HEAD_OF_HOUSEHOLD(taxableIncome);

	        System.out.println("Tax is: $"+tax);


	    }

	    public static double SINGLE_FILER(double TaxIncome)
	    {
	        double tax=0;
	        if (TaxIncome <= 27050)
	                tax = 0.15*TaxIncome;
	            else if (TaxIncome > 27050 && TaxIncome <= 65550)
	                tax = (0.15*27050)+(0.275*(TaxIncome-27050));
	            else if (TaxIncome > 65550 && TaxIncome <= 136750)
	                tax = (0.15*27050)+(0.275*(65550-27050))+(0.305*(TaxIncome-65550));
	            else if (TaxIncome > 136750 && TaxIncome <= 297350)
	                tax = (0.15*27050)+(0.275*(65550-27050))+(0.305*(136750-65550)) + (0.355*(TaxIncome - 136750));
	            else if (TaxIncome>297350)
	                tax = (0.15*27050)+(0.275*(65550-27050))+(0.305*(136750-65550)) + (0.355*(297351 - 136750)) + (0.391*(TaxIncome-297351));
	        
	        return tax;
	    }

	    public static double MARRIED_JOINTLY_QUALIFIED_WIDOWER(double TaxIncome)
	    {
	        double tax=0;
	        if (TaxIncome <= 45200)
	                tax = 0.15*TaxIncome;
	            else if (TaxIncome > 45200 && TaxIncome <= 109250)
	                tax = (0.15*45200)+(0.275*(TaxIncome-45200));
	            else if (TaxIncome > 109250 && TaxIncome <= 166500)
	                tax = (0.15*45200)+(0.275*(109250-45200))+(0.305*(TaxIncome-109250));
	            else if (TaxIncome > 166500 && TaxIncome <= 297350)
	                tax = (0.15*45200)+(0.275*(109250-45200))+(0.305*(166500-109250)) + (0.355*(TaxIncome - 136750));
	            else if (TaxIncome>297350)
	                tax = (0.15*45200)+(0.275*(109250-45200))+(0.305*(166500-109250)) + (0.355*(297351 - 166500)) + (0.391*(TaxIncome-297351));
	            return tax;
	    }

	    public static double MARRIED_SEPERATELY(double taxIncome)
	    {
	        double tax=0;
	        if (taxIncome <= 22600)
	                tax = 0.15*taxIncome;
	            else if (taxIncome > 22600 && taxIncome <= 54625)
	                tax = (0.15*22600)+(0.275*(taxIncome-22600));
	            else if (taxIncome > 54625 && taxIncome <= 83250)
	                tax = (0.15*22600)+(0.275*(54625-22600))+(0.305*(taxIncome-54625));
	            else if (taxIncome > 83250 && taxIncome <= 148675)
	                tax = (0.15*22600)+(0.275*(54625-22600))+(0.305*(83250-54625)) + (0.355*(taxIncome - 136750));
	            else if (taxIncome>148675)
	                tax = (0.15*22600)+(0.275*(54625-22600))+(0.305*(83250-54625)) + (0.355*(148675 - 83250)) + (0.391*(taxIncome-148675));  
	                return tax;
	    }

	    public static double HEAD_OF_HOUSEHOLD(double taxIncome)
	    {
	        double tax=0;
	        if (taxIncome <= 36250)
	                tax = 0.15*taxIncome;
	            else if (taxIncome > 36250 && taxIncome <= 93650)
	                tax = (0.15*36250)+(0.275*(taxIncome-36250));
	            else if (taxIncome > 93650 && taxIncome <= 151650)
	                tax = (0.15*36250)+(0.275*(93650-36250))+(0.305*(taxIncome-93650));
	            else if (taxIncome > 151650 && taxIncome <= 297350)
	                tax = (0.15*36250)+(0.275*(93650-36250))+(0.305*(151650-93650)) + (0.355*(taxIncome - 136750));
	            else if (taxIncome>297350)
	                tax = (0.15*36250)+(0.275*(93650-36250))+(0.305*(151650-93650)) + (0.355*(297350 - 151650)) + (0.391*(taxIncome-297350));
	        return tax;
	    }

	    public static void choice2()
	    {
	        Scanner scnr = new Scanner (System.in);
	        System.out.print("Enter the amount From: $");
	        double lLimit = scnr.nextDouble();
	        System.out.print("Enter the amount To: $");
	        double ulimit = scnr.nextDouble();
	        System.out.println("2001 tax tables for taxable incomes from $"+lLimit+" to $"+ulimit);
	        System.out.println("***********************************************************************");
	        System.out.println("Taxable Income \t Single \t Married Joint or Qualifying widow(er) \t Married Seperately \t Head of House");
	        System.out.println("***********************************************************************");
	        double i;
	        for (i=lLimit; i<=ulimit; i+=1000.0)
	        {
	            double single = SINGLE_FILER(i);
	            double marriedJoint = MARRIED_JOINTLY_QUALIFIED_WIDOWER(i);
	            double ms = MARRIED_SEPERATELY(i);
	            double h = HEAD_OF_HOUSEHOLD(i);
	            System.out.println(i+"\t"+single+"\t"+marriedJoint+"\t"+ms+"\t"+h);
	        }
	        System.out.println("\n2009 tax tables for taxable incomes from $"+lLimit+" to $"+ulimit);
	        System.out.println("*******************************************************************");
	        System.out.println("Taxable Income \t Single \t Married Joint or Qualifying widow(er) \t Married Seperately \t Head of House");
	        System.out.println("*******************************************************************");
	       
	        for (i=lLimit; i<=ulimit; i+=1000.0)
	        {
	            double s = SINGLE_FILER(i);
	            double mj = MARRIED_JOINTLY_QUALIFIED_WIDOWER(i);
	            double ms = MARRIED_SEPERATELY(i);
	            double h = HEAD_OF_HOUSEHOLD(i);
	            System.out.println(i+"\t"+s+"\t"+mj+"\t"+ms+"\t"+h);
	        }
	    }
	
	
}

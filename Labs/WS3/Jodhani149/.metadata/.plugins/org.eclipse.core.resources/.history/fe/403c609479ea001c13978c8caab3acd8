package Task2;

import Task1.GeometricObject;

class Triangle2 extends GeometricObject 
{
    public double s1 = 1.0;
    public double side2 = 1.0;
    public double side3 = 1.0;

    public Triangle2() { }

    public Triangle2(double s1, double s2, double s3) throws TriangleException 
    {
        this.s1 = s1;
        this.side2 = s2;
        this.side3 = s3;
        isValidTriangle();
    }

    private void isValidTriangle() throws TriangleException
    {
        if (!isTriangle(s1, side2, side3)) {
            throw new TriangleException(s1, side2, side3);
        }
    }

    public double GetS1() 
    {
        return s1;
    }
    public double GetS2() 
    {
        return side2;
    }
    public double GetS3() 
    {
        return side3;
    }

    public void GetS1(double side1) throws TriangleException 
    {
        this.s1 = side1;
        isValidTriangle();
    }

    public void GetS2(double side2) throws TriangleException
    {
        this.side2 = side2;
        isValidTriangle();
    }

    public void GetS3(double side3) throws TriangleException 
    {
        this.side3 = side3;
        isValidTriangle();
    }

    @Override
    public double getArea() 
    {
        double s = (s1 + side2 + side3) / 2.0;
        return Math.pow(s * (s - s1) * (s - side2) * (s - side3), 0.5);
    }
    
    @Override
    public double getPerimeter() 
    {
        return s1 + side2 + side3;
    }    

    @Override
    public String toString() 
    {
        return "Triangle { " + "side1 = " + s1 + ", side2 = " + side2 + ", side3 = " + side3 + " }";
    }
    
    public static boolean isTriangle(double side1, double side2, double side3) 
    {
        return  ((side1 + side2 > side3) &&
                (side1 + side3 > side2) &&
                (side3 + side2 > side1));
    }
    public class TriangleException extends Exception 
    {
        private double s1;
        private double s2;
        private double s3;
        public TriangleException(double s1, double s2, double s3) 
        {
            super("The sides of the Triangle violates the rules:" + " side1 = " + s1 + " side2 = " + s2 + " side3 = " + s3);
            this.s1 = s1;
            this.s2 = s2;
            this.s3 = s3;
        }
        public double getS1() 
        {
            return s1;
        }
        public double getS2() 
        {
            return s2;
        }
        public double getS3()
        {
            return s3;
        }
    }
}